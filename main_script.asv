%% Define file paths and parameters
csv_filepath = 'C:\Users\gwosiak\Documents\MATLAB\Artificial Microstructures for PEM\input examples\size_distribution.csv'; % input file for particle size distribution
inputs_filepath = 'C:\Users\gwosiak\Documents\MATLAB\Artificial Microstructures for PEM\input examples\Inputs.mat'; % Initial disconnected particles input file from MATBOX

voxel_size = 10; % nm
savefolder = 'C:\Users\gwosiak\Documents\Matbox_test\test 5\'; 
domain_size = [200, 200, 150]; % W x L x H in voxels
catalyst_tot_vol_fraction = 0.11; % From ink composition
bridge_fraction = 0.5; % (values from 0 to 1) Ajusts essentially the bridge volume fraction of the catalyst phase, higher value means higher connectivity 
ionomer_volume_fraction = 0.15; % Target ionomer volume fraction

save_progression = true;
save_verification = true;
maxtime = 999999; 
refresheachs = 20;

%% Generate Microstructure
catalyst_vol_fraction = (1 - bridge_fraction) * catalyst_tot_vol_fraction;
bridge_vol_fraction = catalyst_tot_vol_fraction - catalyst_vol_fraction;

volumefraction_along_3rd_axis = [0, 1; catalyst_vol_fraction, catalyst_vol_fraction];

% Define colormaps for the phases
colormap0 = [0.7, 0.7, 0.7]; % Light gray color for zero value
colormapPhase1 = [0.4, 0.4, 0.4]; % Dark gray color for phase 1
colormapPhase2 = [255 157 27]/255; % Orange color for phase 2
fullColormap = [colormap0; colormapPhase1; colormapPhase2]; % Combined colormap

% Define colormap for jointed structure
jointedColormap = [colormap0; colormapPhase1]; % Light gray for phase 0 and dark gray for phase 1

% Call the function and capture the processed inputs structure and microstructure
[inputs, microstructure3D] = process_particle_distribution(csv_filepath, inputs_filepath, voxel_size, savefolder, save_progression, save_verification, maxtime, refresheachs, domain_size, volumefraction_along_3rd_axis, run_number);

close all

% Display the updated inputs structure and microstructure
disp(inputs);
disp(microstructure3D);

% Visualize initial microstructure
figure;
imagesc(microstructure3D.phase(:, :, 100));
axis equal tight;
set(gca, 'YDir', 'normal');
colormap(jointedColormap);

% Initialize inputs for generate_additive
background_id = 0; % Background ID value
additive_id = 2; % Additive ID value
target_volume_fraction = bridge_vol_fraction; % Target volume fraction
minimum_dist = 1; % Minimum distance value
randomize_level = 0; % Randomize level
erosiondilatation_depth = 1; % Erosion/dilatation depth

% Call the generate_additive function
microstructure_bridge = generate_additive(microstructure3D.phase, background_id, additive_id, target_volume_fraction, minimum_dist, randomize_level, erosiondilatation_depth);

% Visualize microstructure with bridge
figure;
imagesc(microstructure_bridge(:, :, 100));
axis equal tight;
set(gca, 'YDir', 'normal');
colormap(fullColormap);

% Call the join_phases function using the modified microstructure
microstructure_bridge_jointed = join_phases(microstructure_bridge);

% Visualize jointed microstructure with specific colormap
figure;
imagesc(microstructure_bridge_jointed(:, :, 100));
axis equal tight;
set(gca, 'YDir', 'normal');
colormap(jointedColormap);

ionomer_id = 2; % Assuming a different ID for the ionomer

% Call the generate_additive function to add ionomer
Microstructure_bridge_jointed_ionomer = generate_additive(microstructure_bridge_jointed, background_id, ionomer_id, ionomer_volume_fraction, minimum_dist, randomize_level, erosiondilatation_depth);

% Visualize final microstructure with ionomer
figure;
imagesc(Microstructure_bridge_jointed_ionomer(:, :, 100));
axis equal tight;
set(gca, 'YDir', 'normal');
colormap(fullColormap);

% 3D Visualization of the final microstructure using volshow
volumeData = Microstructure_bridge_jointed_ionomer;

% Define color for each phase
colors = [
    0.7, 0.7, 0.7; % Light gray for phase 0
    0.4, 0.4, 0.4; % Dark gray for phase 1
    255 157 27]/255; % Orange for phase 2

% Display the 3D volume
viewer = viewer3d('BackgroundColor', [0.9 0.9 0.9], 'GradientColor', [0.75 0.75 0.75], 'Lighting', 'on', 'BackgroundGradient', 'on');
volshow(volumeData, 'Colormap', colors, 'Parent', viewer);

% Save the final structure as 8-bit .tif
final_structure_8bit = uint8(255 * (Microstructure_bridge_jointed_ionomer / max(Microstructure_bridge_jointed_ionomer(:))));
tif_filepath = fullfile(savefolder, 'final_structure.tif');

% Create a Tiff object
t = Tiff(tif_filepath, 'w');

% Define the tags for the Tiff file
tagstruct.ImageLength = size(final_structure_8bit, 1);
tagstruct.ImageWidth = size(final_structure_8bit, 2);
tagstruct.Photometric = Tiff.Photometric.MinIsBlack;
tagstruct.BitsPerSample = 8;
tagstruct.SamplesPerPixel = 1;
tagstruct.RowsPerStrip = 16;
tagstruct.PlanarConfiguration = Tiff.PlanarConfiguration.Chunky;
tagstruct.Software = 'MATLAB';

% Write each slice to the Tiff file
for i = 1:size(final_structure_8bit, 3)
    setTag(t, tagstruct);
    write(t, final_structure_8bit(:, :, i));
    if i < size(final_structure_8bit, 3)
        writeDirectory(t);
    end
end

% Close the Tiff object
close(t);
