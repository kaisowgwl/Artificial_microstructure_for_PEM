function [inputs, microstructure3D] = process_particle_distribution(csv_filepath, inputs_filepath, voxel_size, savefolder, save_progression, save_verification, maxtime, refresheachs, domain_size, volumefraction_along_3rd_axis, run_number)
    % Read the data from the CSV file
    data = readmatrix(csv_filepath);

    % Separate the data into size and distribution columns
    particle_size = data(13:end, 1);             % Particle sizes (assuming diameters)
    distribution_percent = data(13:end, 2);      % Volume distribution percentages

    % Define a new linear size grid for interpolation
    min_size = min(particle_size);
    max_size = max(particle_size);
    linear_size_grid = linspace(min_size, max_size, 50); % Create 50 linearly spaced points

    % Interpolate the distribution percentages onto this new size grid using linear interpolation
    interpolated_distribution = interp1(particle_size, distribution_percent, linear_size_grid, 'linear');

    % Convert interpolated distribution percent to fraction
    interpolated_distribution_fraction = interpolated_distribution / 100;

    % Assuming the interpolated sizes are diameters and particles are spherical
    interpolated_radius = linear_size_grid / 2;  % Convert diameter to radius

    % Calculate the volume for spherical particles (V = 4/3 * pi * r^3)
    interpolated_particle_volume = (4/3) * pi * (interpolated_radius .^ 3);

    % Calculate the total volume contributed by each size class
    interpolated_total_volume_each_size_class = interpolated_particle_volume .* interpolated_distribution_fraction;

    % Sum the total volumes to find the total volume of all particles
    interpolated_total_volume_all_particles = sum(interpolated_total_volume_each_size_class);

    % Calculate the volume fraction for each size class
    interpolated_volume_fraction_each_size_class = interpolated_total_volume_each_size_class / interpolated_total_volume_all_particles;

    % Normalize the volume fractions to sum up to 100%
    normalized_volume_fractions = 100 * interpolated_volume_fraction_each_size_class / sum(interpolated_volume_fraction_each_size_class);

    % Force the sum of the normalized volume fractions to be exactly 100%
    adjusted_last_fraction = 100 - sum(normalized_volume_fractions(1:end-1));
    normalized_volume_fractions(end) = adjusted_last_fraction;

    % Ensure the volume fraction data is reshaped correctly if needed
    normalized_volume_fractions = normalized_volume_fractions(:); % Ensure it is a column vector

    % Combine the results into a new matrix with the normalized values
    interpolated_results = [linear_size_grid', normalized_volume_fractions];

    % Plot the original data
    figure;
    plot(data(:,1), data(:,2));
    set(gca, 'YScale', 'log');
    set(gca, 'XScale', 'log');
    xlabel('Volume Size Distribution');
    ylabel('Size / nm');

    % Plot the interpolated results
    figure;
    scatter(interpolated_results(:,1), interpolated_results(:,2));
    xlabel('Particle Size / nm');
    ylabel('Volume Fraction');

    % Load the inputs data
    inputs = load(inputs_filepath);

    % Update domain size and volume fraction along the 3rd axis
    inputs.domain_size = domain_size;
    inputs.phase.volumefraction.along_3rd_axis = volumefraction_along_3rd_axis;

    input_table = interpolated_results';

    % Convert size(nm) to voxels
    input_table(1,:) = input_table(1,:) ./ voxel_size;
    input_table(2,:) = input_table(2,:);
    input_table(3,:) = input_table(2,:);

    input_final(:,1) = inputs.phase.size_histogram.along_3rd_axis(:,1);
    table_size = size(input_table,2) + 1;
    input_final(:,2:table_size) = input_table(:,:);

    % Update the size histogram along the 3rd axis in the inputs structure
    inputs.phase.size_histogram.along_3rd_axis = input_final;

    % Set the stopping conditions
    inputs.stopingconditions.maxtime = maxtime;
    inputs.stopingconditions.refresheachs = refresheachs;

    % Save the updated inputs structure
    save(fullfile(savefolder, 'inputs.mat'), '-struct', 'inputs');

    % Additional save options
    if save_progression
        % Save progression related data (placeholder for actual implementation)
        disp('Progression data saved.');
    end
    if save_verification
        % Save verification related data (placeholder for actual implementation)
        disp('Verification data saved.');
    end

    % Ensure the save folder exists
    if ~exist(savefolder, 'dir')
        mkdir(savefolder);
    end

    % Call the Microstructure_generation_stochastic_frominputs function
    try
        Microstructure_generation_stochastic_frominputs(inputs, run_number, savefolder, save_progression, save_verification);
    catch ME
        disp('An error occurred while generating the microstructure.');
        disp(ME.message);
        microstructure3D = [];
        return;
    end

    % Load the generated microstructure data
    microstructure_file = fullfile(savefolder, ['Additionalinfo_run_' num2str(run_number) '.mat']);
    microstructure_data = load(microstructure_file);
    microstructure3D = microstructure_data.microstructure3D;
end
